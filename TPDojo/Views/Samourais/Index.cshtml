@using TPDojo.Utils
@model PaginatedList<BO.Samourai>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Rechercher" class="btn btn-default" />
        </p>
        <p>
            <a asp-action="Index">Retirer le filtre</a>
        </p>
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NomSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Nom</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["ForceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Force</a>
            </th>
            <th>
                Arme
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Nom)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Force)
                </td>
                <td>
                    @if (item.Arme == null)
                    {
                        @Html.DisplayFor(model => item.Arme!.Nom)
                    }
                    else
                    {
                        //linkText, actionName, controllerName, routeValues, htmlAttributes
                        @Html.ActionLink(item.Arme!.Nom, "Details", "Armes", new {id = item.Arme!.Id}, null)
                    }
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            </tr>
        }
        @{
            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
        }

        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-default @prevDisabled">
            Previous
        </a>
        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-default @nextDisabled">
            Next
        </a>
    </tbody>
</table>
